#!/bin/bash

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
CERTS_DIR="${ROOT_DIR}/.certs"

rm -rf "${CERTS_DIR}"
mkdir -p "${CERTS_DIR}"

WEBHOOK_NAME="${WEBHOOK_NAME:-gitlab-workspaces-kubernetes-webhook}"
WEBHOOK_NAMESPACE="${WEBHOOK_NAMESPACE:-default}"
CLUSTER_DOMAIN="${CLUSTER_DOMAIN:-cluster.local}"

# Generate CA
openssl genrsa -out "${CERTS_DIR}/ca.key" 2048

openssl req -new -x509 -days 365 -key "${CERTS_DIR}/ca.key" \
  -subj "/C=AU/CN=${WEBHOOK_NAME}" \
  -out "${CERTS_DIR}/ca.crt"

# Generate OpenSSL config with SANs including wildcards
cat > "${CERTS_DIR}/openssl.cnf" <<EOF
[ req ]
default_bits       = 2048
prompt             = no
default_md         = sha256
distinguished_name = dn
req_extensions     = v3_req

[ dn ]
C = AU
CN = ${WEBHOOK_NAME}

[ v3_req ]
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = ${WEBHOOK_NAME}
DNS.2 = ${WEBHOOK_NAME}.${WEBHOOK_NAMESPACE}
DNS.3 = ${WEBHOOK_NAME}.${WEBHOOK_NAMESPACE}.svc
DNS.4 = ${WEBHOOK_NAME}.${WEBHOOK_NAMESPACE}.svc.${CLUSTER_DOMAIN}
DNS.5 = *.${WEBHOOK_NAMESPACE}.svc
DNS.6 = *.${WEBHOOK_NAMESPACE}.svc.${CLUSTER_DOMAIN}
EOF

# Generate server certs using OpenSSL config
openssl req -newkey rsa:2048 -nodes -keyout "${CERTS_DIR}/server.key" \
  -subj "/C=AU/CN=${WEBHOOK_NAME}" \
  -out "${CERTS_DIR}/server.csr" \
  -config "${CERTS_DIR}/openssl.cnf"

openssl x509 -req \
  -days 365 \
  -in "${CERTS_DIR}/server.csr" \
  -CA "${CERTS_DIR}/ca.crt" -CAkey "${CERTS_DIR}/ca.key" -CAcreateserial \
  -out "${CERTS_DIR}/server.crt" \
  -extensions v3_req -extfile "${CERTS_DIR}/openssl.cnf"

# Create secret
kubectl --namespace "${WEBHOOK_NAMESPACE}" create secret tls "${WEBHOOK_NAME}-tls" \
  --cert="${CERTS_DIR}/server.crt" \
  --key="${CERTS_DIR}/server.key" \
  --dry-run=client -o yaml \
  > "${SCRIPT_DIR}/manifests/webhook/webhook.tls.secret.yaml"

# Build CA bundle with 8-space indentation
CA_BUNDLE=$(base64 -w 0 < "${CERTS_DIR}/ca.crt")
FOLDED_CA=$(echo "$CA_BUNDLE" | fold -w64 | sed 's/^/        /')

# Escape for sed (add \n for multi-line)
ESCAPED_CA=$(printf "%s\n" "$FOLDED_CA" | sed ':a;N;$!ba;s/\n/\\n/g')

# Inject into YAML files
for yaml in \
  "${ROOT_DIR}/dev/manifests/cluster-config/mutating.config.yaml" \
  "${ROOT_DIR}/dev/manifests/cluster-config/validating.config.yaml"
do
  echo ">> Updating $yaml"
  sed -i "s|<CA>|$ESCAPED_CA|" "$yaml"
done

echo "âœ… caBundle updated"
rm -rf "${CERTS_DIR}"
